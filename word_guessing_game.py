import random
word_list = ['Аббат', 'Аймак', 'Альфа', 'Арбуз', 'Атлас', 'Аванс', 'Акциз', 'Ампер', 'Аркан', 'Ахать', 'Балет', 'Бармы',
       'Бдеть', 'Бивак', 'Блажь', 'Более', 'Брань', 'Будка', 'Бурки', 'Банда', 'Вмять', 'Возня', 'Вотум', 'Всход',
       'Вывод', 'Вычет', 'Вагон', 'Вахта', 'Ведро', 'Вести', 'Гарем', 'Глава', 'Годок', 'Горло', 'Гроза', 'Гунны',
       'Гавот', 'Гелий', 'Глубь', 'Голый', 'Дебит', 'Детва', 'Довод', 'Досуг', 'Дробь', 'Дурно', 'Девка', 'Диета',
       'Дойти', 'Дочка', 'Евнух', 'Ежиха', 'Емкий', 'Ежели', 'Екать', 'Едкий', 'Езжай', 'Ехать', 'Егерь', 'Егоза',
       'Жакан', 'Живец', 'Жупан', 'Жатка', 'Жилец', 'Жених', 'Житие', 'Жажда', 'Жетон', 'Жулик', 'Задок', 'Залив',
       'Зарок', 'Звено', 'Злоба', 'Забой', 'Зажор', 'Замша', 'Затем', 'Зелье', 'Идеал', 'Икать', 'Исток', 'Извив',
       'Индюк', 'Ихний', 'Изгой', 'Ирбис', 'Игрун', 'Изюбр', 'Кочка', 'Крона', 'Кукиш', 'Купол', 'Казна', 'Камыш',
       'Карта', 'Кварц', 'Кисея', 'Клуша', 'Лабаз', 'Лассо', 'Лемма', 'Лидер', 'Лицей', 'Лошак', 'Лютый', 'Ладья',
       'Лгать', 'Лепка', 'Майор', 'Манна', 'Махры', 'Метис', 'Миска', 'Морда', 'Мулат', 'Мышца', 'Магий', 'Малец',
       'Накат', 'Нарыв', 'Нейти', 'Низом', 'Норов', 'Навык', 'Надел', 'Намаз', 'Нахал', 'Ненцы', 'Обзор', 'Обувь',
       'Одурь', 'Округ', 'Онуча', 'Орава', 'Особа', 'Отгул', 'Отрыв', 'Очень', 'Пирог', 'Плеть', 'Пожар', 'Покус',
       'Помол', 'Порыв', 'Почин', 'Причт', 'Пузан', 'Пытка', 'Радон', 'Рафик', 'Резец', 'Ритор', 'Рокот', 'Ружье',
       'Рыжий', 'Район', 'Рвань', 'Рейка', 'Сдуру', 'Сербы', 'Сидор', 'Сиять', 'Скунс', 'Слюни', 'Снизу', 'Сонет',
       'Сотый', 'Сразу', 'Точка', 'Тромб', 'Тупой', 'Тяжба', 'Табор', 'Танго', 'Тезка', 'Тетка', 'Тогда', 'Трата',
       'Узить', 'Умять', 'Утиль', 'Убыть', 'Укора', 'Упырь', 'Ухват', 'Удача', 'Улица', 'Устой', 'Фагот', 'Ферма',
       'Финка', 'Фраза', 'Фюрер', 'Фалда', 'Фижмы', 'Фланг', 'Френч', 'Фасон', 'Химик', 'Холод', 'Хунта', 'Халиф',
       'Хитон', 'Хомяк', 'Хвать', 'Хобби', 'Хором', 'Хиляк', 'Циник', 'Цапля', 'Цуцик', 'Целый', 'Цинга', 'Цапка',
       'Цукат', 'Цедра', 'Цикля', 'Цокот', 'Чашка', 'Чешки', 'Чудак', 'Черви', 'Чирок', 'Чуйка', 'Чалка', 'Чернь',
       'Чреда', 'Чурек', 'Шасть', 'Шепот', 'Шквал', 'Шпана', 'Штрих', 'Шабаш', 'Шакал', 'Шафер', 'Шинок', 'Шлейф',
       'Щенок', 'Щипцы', 'Щелок', 'Щипок', 'Щелка', 'Щечка', 'Щекот', 'Щетка', 'Щучий', 'Щегол', 'Эркер', 'Экран',
       'Эрзац', 'Этнос', 'Эклер', 'Эпоха', 'Этика', 'Эвены', 'Энный', 'Эстет', 'Юдоль', 'Юннат', 'Юнкер', 'Юниор',
       'Юркий', 'Юлить', 'Юрист', 'Юкола', 'Юноша', 'Явный', 'Ястык', 'Якобы', 'Яркий', 'Явить', 'Яство', 'Яичко',
       'Ямщик', 'Ябеда', 'Ясный']

def is_valid_str(choice):
    if choice == 'да' or choice == 'нет':
        return True
    else:
        return False


def get_word():
    s = random.choice(word_list)
    return s.upper()


def display_hangman(tries):
    stages = [  # финальное состояние: голова, торс, обе руки, обе ноги
                 '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # голова, торс, обе руки, одна нога
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # голова, торс, обе руки
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # голова, торс и одна рука
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # голова и торс
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # голова
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # начальное состояние
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]

def play(word):
    # тело функции
    word_completion = ['_'] * len(word)  # строка, содержащая символы _ на каждую букву задуманного слова
    guessed = False                    # сигнальная метка
    guessed_letters = []               # список уже названных букв
    guessed_words = []                 # список уже названных слов
    tries = 6                          # количество попыток
    alp = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
    word_now = ''
    print('Давайте играть в угадайку слов!')
    print(display_hangman(tries))
    print(*word_completion)
    f=True
    word_now = ''
    while True:
        print()
        word_now = input('Введите букву или слово целиком: ').upper()
        if len(word_now) != 1 and len(word_now) != len(word):
            print('Вы ввели недосточно букв или слишком много. Попробуйте еще раз...')
            continue
        for c in word_now:
            if c not in alp:
                print(f'В моем алфавите нет таких букв, как {c}. Попробуйте еще раз...')
                f = False
                break
        if not f:
            continue

        if word_now in guessed_letters or word_now in guessed_words:
            print('У меня дежавю? Вы уже предлагали этот вариант. Попробуйте снова...')
            continue
        if len(word_now) == 1 and word_now in word:
            for i in range(len(word)):
                if word[i] == word_now:
                    word_completion[i] = word_now
            print('букву в сутдию \n', *word_completion)
            guessed_letters.append(word_now)

        if word_now == word or ''.join(word_completion) == word:
            print('Поздравляем, вы угадали слово! Вы победили!')
            break
        if len(word_now) == 1 and word_now not in word:
            print('Такой буквы в моем слове нет')
            tries -= 1
            print(display_hangman(tries))
            print('осталось попыток:', tries)
            print(*word_completion)
        if len(word_now) == len(word):
            if word_now == word or ''.join(word_completion) == word:
                print('Поздравляем, вы угадали слово! Вы победили!')
                break
            else:
                print('Я загадывал не это слово :( ')
                tries -= 1
                print(display_hangman(tries))
                print('осталось попыток:', tries)

        if tries == 0:
            print('К сожалению вы проиграли')
            print('Я загадывал слово:', word)
            break

da = 'да'
while True:
    print()
    otvet = input("Хотите сыграть в угадайку? да/нет: ")
    if is_valid_str(otvet):
        if da == otvet:
            play(get_word())
        else:
            print('Приходите когда захотите поиграть')
            break
    else:
        print('Может все-таки стоило написать "да" или "нет"? Попробуем еще раз...')
        continue
    print()